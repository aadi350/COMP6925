using JuMP, Cbc

m = Model(Cbc.Optimizer)

SITE_COST = [4, 3.60, 2.30, 4.10, 3.15, 2.80, 2.65]
COMMUNITY_POP = [4, 3, 10, 13, 6, 7, 9, 11, 15, 11, 6, 12, 7, 5, 16]
SITE_SERV = [
    [4 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
    [0 3 10 0 6 0 0 0 0 0 0 0 0 0 0 0];
    [4 0 0 0 0 0 7 0 15 11 0 0 0 0 0 0];
    [0 0 0 14 0 7 0 11 15 0 0 0 0 0 0 0];
    [4 3 0 0 0 7 9 0 15 0 6 0 0 0 0 0];
    [0 0 0 0 6 0 9 0 0 11 0 12 0 5 0 0];
    [4 3 0 0 0 0 0 0 0 0 0 0 12 7 5 16]
]


NUM_SERV = zeros(7)
for n in 1:7
    NUM_SERV[n] = sum(SITE_SERV[n, 1:16])
end

@variable(m, x[1:7, 1:15], binary=true)
@variable(m, y[1:7], binary = true)


@constraint(m, SITE_COST' * y <= 11)


for row in 1:length(SITE_COST)
    for col in 1:15
        @constraint(m, x[row, col] <= y[row])
    end
end

for l in 1:length(SITE_COST)
    @constraint(m, sum(x[1:7, l]) <= 1)
end


@objective(m, Max, NUM_SERV' * y)
optimize!(m)

status = termination_status(m)

println("Solution status: ", status)
println("Objective value:  ", objective_value(m))
print(value.(y))
