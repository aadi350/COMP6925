using JuMP, GLPK

m = Model(GLPK.Optimizer)

@variable(m, x[0:11] >= 0)

KG_TO_LB = 2.20462262185

DEMAND_KG = [
    134, 109, 107, 85, 69, 90
]

COST = [
    16, 16, 32, 23, 20, 15
]

DEMAND = DEMAND_KG * KG_TO_LB
println(DEMAND)

@constraint(m, x[1] == DEMAND[1])
@constraint(m, (x[2] + x[3]) == DEMAND[2])  # 109 kg
@constraint(m, (x[4] + x[5]) == DEMAND[3])  # 107 kg
@constraint(m, (x[6] + x[7]) == DEMAND[4])    # 85 kg
@constraint(m, (x[8] + x[9]) == DEMAND[5])  # 69 kg
@constraint(m, (x[10] + x[11]) == DEMAND[6])  # 90 kg

@objective(m, Min, COST[1]*(x[1] + x[2]) + COST[2]*(x[3] + x[4]) + COST[3]*(x[5] + x[6]) + COST[4]*(x[7] + x[8]) + COST[5]*(x[9] + x[10]) + COST[6]*(x[11]))

println(m)

optimize!(m)

status = termination_status(m)

println("Solution status: ", status)

println("Total Cost:  ", objective_value(m))

println("Monday: ", value(x[1]) + value(x[2]))
println("Tuesday: ", value(x[3]) + value(x[4]))
println("Wednesday: ", value(x[5]) + value(x[6]))
println("Thursday: ", value(x[7]) + value(x[8]))
println("Friday: ", value(x[9]) + value(x[10]))
println("Saturday: ", value(x[11]))
